[코딩애플] 도커 Docker & Container 내용 요약

도커 Docker 다운로드 방법
참고 URL - https://junesker.tistory.com/94

2강 - Docker 설치 & 이미지와 컨테이너 개념
컨테이너(container)란?
다운로드 받은 이미지(image)를 실행 중인 리눅스 기반 가상 컴퓨터

터미널창 도커 관련 명령어 
1) 현재 다운로드 받은 도커 이미지 목록 출력
docker image ls

2) 도커 이미지 다운로드 받기 
docker pull hello-world

3) 도커 이미지 실행 
docker run 이미지이름:태그
(예) docker run hello-world:latest

3강 - Docker로 띄워볼 서버만들기

4강 - Dockerfile 명령어 & 이미지 만들기
Dockerfile 명령어
1) FROM node:22-alpine
이런걸 기재하면 Node.js 22버전과 alpine 리눅스 OS가 설치된 채로 시작.

2) FROM node:20-slim
Node.js 20버전 설치된 채로 시작 (윈도우 OS)

3) FROM scratch
참고로 바이너리로 컴파일한 파일만 돌리면 되는 경우엔
OS 설치가 딱히 필요없을 수 있는데 그럴 땐 빈 도화지에서 시작하라고 이런걸 쓰기도 합니다.

4) RUN npm install express
RUN 뒤에 있는걸 터미널 명령어처럼 실행(express 라이브러리 설치)

5) COPY 내컴퓨터파일경로 이미지내부파일경로 
내 컴퓨터에 있던 파일을 이미지로 복사
COPY 명령어 뒤에는 경로 2개를 적을 수 있는데
왼쪽에는 내컴퓨터 폴더경로, 오른쪽에는 이미지 어디로 옮길건지 정하면 됩니다.
(예) COPY . .
마침표(.)는 현재 경로라는 뜻이기 때문에
Dockerfile 현재경로 옆에 있던 모든 파일과 폴더들을 가상컴퓨터 현재경로로 복사해달라는 뜻입니다.
그러면 소스코드도 전부 복사되어서 편하겠군요.
근데 이러면 node_modules같은 라이브러리 소스코드도 복사해줄텐데 굳이 그건 복사할 필요는 없습니다.
복사하기 싫은 파일이 있으면 아래처럼 .dockerignore 파일 만들어서 파일이나 폴더경로 기재해두면 됩니다.
그러면 아래 3가지 파일(.git, Dockerfile, node_modules)은 복사 대상 제외 처리
.git
Dockerfile
node_modules

6) WORKDIR /app
근데 파일 카피하기 전에 폴더 이동을 좀 해보도록 합시다.
왜냐면 이미지 기본 경로에 옮기면 파일이 좀 많으면 더러울 수 있으니까
/app 같은 폴더 하나 만들어서 거기로 이동하라고 합시다.
쉽게하려면 WORKDIR /app 이러면 됩니다.
그러면 현재 작업경로를 /app 폴더로 바꿔주고 /app 폴더가 없으면 하나 만들어줍니다.
터미널 명령어중에 cd와 비슷한 역할입니다.

7) RUN ["npm", "install"]
그 다음에 npm install을 터미널에서 입력하면 package.json에 기재된 라이브러리가 설치된다고 했으니까
npm install 하라고 명령을 줘봅시다.
RUN npm install 이렇게 써도 되는데 대괄호치는게 더 안정적인 방식입니다.

괄호 안치면 /bin/sh -c npm install 이라는 명령어가 실행이 되는데
이게 뭐냐면 내 OS에 기본적으로 설치된 shell을 이용해서 실행하라는 소리입니다.
그래서 shell이라는 프로그램과 거기서 제공하는 && || 이런 명령어가 필요하면 괄호없이 쓰면 되는데
하지만 shell 기능이 필요없거나 OS마다 shell이 서로 다를 수 있기 때문에 불안하면 대괄호를 씁시다.

8) CMD ["node", "server.js"]
그럼 이제 마지막으로 node server.js 입력하면 파일이 실행되고 그러면 웹서버가 실행됩니다.
그래서 Dockerfile에도 그거 하라고 작성하면 되는데
RUN node server.js 하면 될 것 같은데
하지만 보통 마지막 명령어는 RUN말고 CMD 뒤에 적습니다.

참고사항 - Dockerfile 명령어 CMD vs ENTRYPOINT
CMD vs ENTRYPOINT
나중에 내 이미지를 실행할 때 멋있게 터미널에서 실행하고 싶으면 

docker run 이미지명
입력하면 되는데 근데 뒤에 몰래 명령어를 추가할 수 있습니다.

docker run 이미지명 node server1.js 
그러면 Dockerfile 내의 CMD 부분이
node server1.js로 덮어쓰기가 되어서 실행됩니다.
그래서 매번 다른 명령어로 실행하고 싶으면 CMD 사용하면 덮어쓰기 편리해집니다.

CMD 말고 ENTRYPOINT를 쓰면 기능은 비슷하지만 덮어쓰기가 살짝 어려워집니다.
이상한 명령어를 써야 덮어쓰기가 되기 때문에 
어떻게 보면 ENTRYPOINT쓰면 좀 더 안정적이라고 보면 되겠습니다.

실은 섞어서 써도 됩니다.
변경원하지 않는 부분은 ENTRYPOINT에 넣고
변경원하는 부분은 CMD 넣고 그러셔도 됩니다.

(Dockerfile)

(...생략)
ENTRYPOINT ["node"]
CMD ["server.js"]

예를 들어 이런 식으로 적어두면 
앞으로 이미지 실행할 때 docker run 이미지명 server1.js 이렇게 실행하면
node server1.js 라는 커맨드가 마지막에 실행됩니다.
그래서 docker run 할 때마다 일부 명령어만 가변적으로 덮어쓰기 하고 싶을 때 이런 식으로 써도 되겠습니다.
지금은 쓸데없으니까 아무거나 씁시다.

9) EXPOSE 8080
EXPOSE 명령어 뒤에 8080 이런 식으로 포트번호를 기재할 수 있습니다.

포트가 뭐냐면 컴퓨터에 뚫린 구멍입니다. 
이게 뚫려있어야 외부 사람들이 내 컴퓨터로 접속이 가능해서 웹서버 운영하는 컴퓨터도 포트를 하나 뚫어줘야합니다.
그래서 코드짤 때 8080 이런 포트를 뚫으라고 코드짜놨습니다.

그래서 이미지 돌릴 컴퓨터에도 8080 포트를 오픈하라고 해야하는데 그건 이미지 실행할 때 명령줄 수 있습니다.
근데 위처럼 EXPOSE 8080 이런걸 작성해놓으면 나중에 포트 오픈하라고 명령줄 때 약간 편리합니다.
그래서 편의를 위해 쓰는 메모같은 개념입니다. 없어도 상관은 없음

10) docker build -t 이미지이름:태그 .  
Dockerfile 작성했으면 이걸 바탕으로 이미지를 하나 만들어달라고 명령내릴 수 있습니다.

작업폴더에서 터미널 열어서 입력해봅시다.
- 이미지 이름은 맘대로 작명합시다.
- 태그도 맘대로 작명합시다. 태그는 버전이랑 비슷하게 취급하면 됩니다.
- 마침표자리에는 Dockerfile 경로 입력하면 되는데 마침표(.)는 현재경로라는 뜻입니다.
- 참고로 docker desktop 또는 docker engine이 실행되고 있어야 이거 명령어도 사용가능합니다.

아무튼 그럼 입력하면 커스텀 이미지가 생성됩니다.
이미지 확인은 docker desktop 들어가보거나 터미널에 docker images 입력해봅시다.

* 이미지 실행하기 
위의 docker 명령어 1) ~ 10)번 까지 사용하여 
만든 이미지 실행 잘 되나 확인해봅시다.
재생버튼 누르거나 docker run 명령어 입력하면 되는데
근데 포트 부분에 8080을 기입해서 실행해봅시다.

▲ 누가 내 컴퓨터 8080번 포트로 들어오면 가상 컴퓨터의 8080번 포트로 연결하라는 뜻입니다.
뭔 소리인지는 네트워크 시간에 자세히 알아봅시다.
터미널을 사용할 것이면 docker run -p 8080:8080 이미지명:태그명 입력합시다.

아무튼 브라우저 켜서 localhost:8080으로 들어가보면 웹서버를 만날 수 있습니다.
이게 나만의 커스텀 이미지만들고 실행하는 법 끝입니다.
이제 이 이미지를 다른 컴퓨터로 보내서 실행만 하면 그게 배포 아니겠습니까.

(참고) localhost가 뭐냐면 내 컴퓨터로 접속하라는 뜻입니다.
(참고) 실은 docker init 명령어 입력하면 Dockerfile을 약간 자동완성 해주기 때문에
거기서 필요한거 수정해서 쓰는 방법도 좋습니다.
