[코딩애플] 도커 Docker & Container 내용 요약

도커 Docker 다운로드 방법
참고 URL - https://junesker.tistory.com/94

2강 - Docker 설치 & 이미지와 컨테이너 개념
컨테이너(container)란?
다운로드 받은 이미지(image)를 실행 중인 리눅스 기반 가상 컴퓨터

터미널창 도커 관련 명령어 
1) 현재 다운로드 받은 도커 이미지 목록 출력
docker image ls

2) 도커 이미지 다운로드 받기 
docker pull hello-world

3) 도커 이미지 실행 
docker run 이미지이름:태그
(예) docker run hello-world:latest

3강 - Docker로 띄워볼 서버만들기

4강 - Dockerfile 명령어 & 이미지 만들기
Dockerfile 명령어
1) FROM node:22-alpine
이런걸 기재하면 Node.js 22버전과 alpine 리눅스 OS가 설치된 채로 시작.

2) FROM node:20-slim
Node.js 20버전 설치된 채로 시작 (윈도우 OS)

3) FROM scratch
참고로 바이너리로 컴파일한 파일만 돌리면 되는 경우엔
OS 설치가 딱히 필요없을 수 있는데 그럴 땐 빈 도화지에서 시작하라고 이런걸 쓰기도 합니다.

4) RUN npm install express
RUN 뒤에 있는걸 터미널 명령어처럼 실행(express 라이브러리 설치)

5) COPY 내컴퓨터파일경로 이미지내부파일경로 
내 컴퓨터에 있던 파일을 이미지로 복사
COPY 명령어 뒤에는 경로 2개를 적을 수 있는데
왼쪽에는 내컴퓨터 폴더경로, 오른쪽에는 이미지 어디로 옮길건지 정하면 됩니다.
(예) COPY . .
마침표(.)는 현재 경로라는 뜻이기 때문에
Dockerfile 현재경로 옆에 있던 모든 파일과 폴더들을 가상컴퓨터 현재경로로 복사해달라는 뜻입니다.
그러면 소스코드도 전부 복사되어서 편하겠군요.
근데 이러면 node_modules같은 라이브러리 소스코드도 복사해줄텐데 굳이 그건 복사할 필요는 없습니다.
복사하기 싫은 파일이 있으면 아래처럼 .dockerignore 파일 만들어서 파일이나 폴더경로 기재해두면 됩니다.
그러면 아래 3가지 파일(.git, Dockerfile, node_modules)은 복사 대상 제외 처리
.git
Dockerfile
node_modules

6) WORKDIR /app
근데 파일 카피하기 전에 폴더 이동을 좀 해보도록 합시다.
왜냐면 이미지 기본 경로에 옮기면 파일이 좀 많으면 더러울 수 있으니까
/app 같은 폴더 하나 만들어서 거기로 이동하라고 합시다.
쉽게하려면 WORKDIR /app 이러면 됩니다.
그러면 현재 작업경로를 /app 폴더로 바꿔주고 /app 폴더가 없으면 하나 만들어줍니다.
터미널 명령어중에 cd와 비슷한 역할입니다.

7) RUN ["npm", "install"]
그 다음에 npm install을 터미널에서 입력하면 package.json에 기재된 라이브러리가 설치된다고 했으니까
npm install 하라고 명령을 줘봅시다.
RUN npm install 이렇게 써도 되는데 대괄호치는게 더 안정적인 방식입니다.

괄호 안치면 /bin/sh -c npm install 이라는 명령어가 실행이 되는데
이게 뭐냐면 내 OS에 기본적으로 설치된 shell을 이용해서 실행하라는 소리입니다.
그래서 shell이라는 프로그램과 거기서 제공하는 && || 이런 명령어가 필요하면 괄호없이 쓰면 되는데
하지만 shell 기능이 필요없거나 OS마다 shell이 서로 다를 수 있기 때문에 불안하면 대괄호를 씁시다.

8) CMD ["node", "server.js"]
그럼 이제 마지막으로 node server.js 입력하면 파일이 실행되고 그러면 웹서버가 실행됩니다.
그래서 Dockerfile에도 그거 하라고 작성하면 되는데
RUN node server.js 하면 될 것 같은데
하지만 보통 마지막 명령어는 RUN말고 CMD 뒤에 적습니다.

참고사항 - Dockerfile 명령어 CMD vs ENTRYPOINT
CMD vs ENTRYPOINT
나중에 내 이미지를 실행할 때 멋있게 터미널에서 실행하고 싶으면 

docker run 이미지명
입력하면 되는데 근데 뒤에 몰래 명령어를 추가할 수 있습니다.

docker run 이미지명 node server1.js 
그러면 Dockerfile 내의 CMD 부분이
node server1.js로 덮어쓰기가 되어서 실행됩니다.
그래서 매번 다른 명령어로 실행하고 싶으면 CMD 사용하면 덮어쓰기 편리해집니다.

CMD 말고 ENTRYPOINT를 쓰면 기능은 비슷하지만 덮어쓰기가 살짝 어려워집니다.
이상한 명령어를 써야 덮어쓰기가 되기 때문에 
어떻게 보면 ENTRYPOINT쓰면 좀 더 안정적이라고 보면 되겠습니다.

실은 섞어서 써도 됩니다.
변경원하지 않는 부분은 ENTRYPOINT에 넣고
변경원하는 부분은 CMD 넣고 그러셔도 됩니다.

(Dockerfile)

(...생략)
ENTRYPOINT ["node"]
CMD ["server.js"]

예를 들어 이런 식으로 적어두면 
앞으로 이미지 실행할 때 docker run 이미지명 server1.js 이렇게 실행하면
node server1.js 라는 커맨드가 마지막에 실행됩니다.
그래서 docker run 할 때마다 일부 명령어만 가변적으로 덮어쓰기 하고 싶을 때 이런 식으로 써도 되겠습니다.
지금은 쓸데없으니까 아무거나 씁시다.

9) EXPOSE 8080
EXPOSE 명령어 뒤에 8080 이런 식으로 포트번호를 기재할 수 있습니다.

포트가 뭐냐면 컴퓨터에 뚫린 구멍입니다. 
이게 뚫려있어야 외부 사람들이 내 컴퓨터로 접속이 가능해서 웹서버 운영하는 컴퓨터도 포트를 하나 뚫어줘야합니다.
그래서 코드짤 때 8080 이런 포트를 뚫으라고 코드짜놨습니다.

그래서 이미지 돌릴 컴퓨터에도 8080 포트를 오픈하라고 해야하는데 그건 이미지 실행할 때 명령줄 수 있습니다.
근데 위처럼 EXPOSE 8080 이런걸 작성해놓으면 나중에 포트 오픈하라고 명령줄 때 약간 편리합니다.
그래서 편의를 위해 쓰는 메모같은 개념입니다. 없어도 상관은 없음

10) docker build -t 이미지이름:태그 .  
Dockerfile 작성했으면 이걸 바탕으로 이미지를 하나 만들어달라고 명령내릴 수 있습니다.

작업폴더에서 터미널 열어서 입력해봅시다.
- 이미지 이름은 맘대로 작명합시다.
- 태그도 맘대로 작명합시다. 태그는 버전이랑 비슷하게 취급하면 됩니다.
- 마침표자리에는 Dockerfile 경로 입력하면 되는데 마침표(.)는 현재경로라는 뜻입니다.
- 참고로 docker desktop 또는 docker engine이 실행되고 있어야 이거 명령어도 사용가능합니다.

아무튼 그럼 입력하면 커스텀 이미지가 생성됩니다.
이미지 확인은 docker desktop 들어가보거나 터미널에 docker images 입력해봅시다.

* 이미지 실행하기 
위의 docker 명령어 1) ~ 10)번 까지 사용하여 
만든 이미지 실행 잘 되나 확인해봅시다.
재생버튼 누르거나 docker run 명령어 입력하면 되는데
근데 포트 부분에 8080을 기입해서 실행해봅시다.

▲ 누가 내 컴퓨터 8080번 포트로 들어오면 가상 컴퓨터의 8080번 포트로 연결하라는 뜻입니다.
뭔 소리인지는 네트워크 시간에 자세히 알아봅시다.
터미널을 사용할 것이면 docker run -p 8080:8080 이미지명:태그명 입력합시다.

아무튼 브라우저 켜서 localhost:8080으로 들어가보면 웹서버를 만날 수 있습니다.
이게 나만의 커스텀 이미지만들고 실행하는 법 끝입니다.
이제 이 이미지를 다른 컴퓨터로 보내서 실행만 하면 그게 배포 아니겠습니까.

(참고) localhost가 뭐냐면 내 컴퓨터로 접속하라는 뜻입니다.
(참고) 실은 docker init 명령어 입력하면 Dockerfile을 약간 자동완성 해주기 때문에
거기서 필요한거 수정해서 쓰는 방법도 좋습니다.

5강 - 컨테이너 다루기

* 이미지 실행 터미널에서 하려면
docker run -d 이미지명:태그명 (예) docker run nodeserver:1 / docker run -d nodeserver:1

터미널에 입력하면 이미지를 컨테이너에서 실행할 수 있다고 했는데
근데 이러면 터미널 하나를 무단 점유하기 때문에 터미널이 또 필요해지면 하나 더 귀찮게 열어야한다.
그게 싫으면 -d 옵션을 집어넣어서 백그라운드에서 실행가능하다.

여기서 -d 옵션은 detached의 약자이다.

* 이미지 실행시 포트 설정
docker run -p 8081:8080 -d 이미지명:태그명 (예) docker run -d -p 8081:8080 nodeserver:1 / docker run -d -p 8080:8080 nodeserver:1

이미지를 실행할 때 포트를 설정해주고 싶으면 -p 옵션 넣고 내컴퓨터포트:컨테이너포트 집어넣으면 된다.

그래서 위처럼 실행하면 누가 내 컴퓨터 8081 포트로 들어오면 컨테이너의 8080 포트로 안내해주라는 뜻이다.
포트설정 없이 그냥 띄우면 브라우저로 접속했을 때 아무것도 안 뜬다.

하지만 왜 그런지 이유를 알아야 나중에 응용이 되기 때문에
왜 포트 설정을 해야하는지는 그림을 봅시다.

▲ 포트 설정을 안해놨을 때 왜 localhost:8080으로 접속했을 때 아무것도 없냐면
일단 localhost는 내 컴퓨터로 접속하라는 뜻이고
8080은 8080번 포트로 접속하라는 뜻입니다.

근데 거기로 들어가봤자 웹서버는 없음
왜냐면 웹서버는 내 컴퓨터 안의 가상컴퓨터(container)에서 돌아가고 있다.

내 컴퓨터(localhost) 안의 은밀한 곳에서 혼자 돌아가고 있기 때문에
내 컴퓨터(localhost) & 가상컴퓨터(container)의 포트끼리 연결하는 작업을 해주면 된다.

▲ 포트끼리 연결하는건 별거 아니고
"내 컴퓨터(localhost) A번 포트로 들어오면 컨테이너(가상컴퓨터(container))의 B번 포트로 보내라" 이건데
이걸 하고 싶으면 컨테이너 실행할 때 -p 내컴퓨터포트번호:컨테이너포트번호 하면 된다.
똥배관 연결같은 것임

Q. 다른 컴퓨터 접속은 어떻게 하는 것임?

그니까 지금 계속 다른 사람들이 내 컴퓨터에 접속한다고 했는데 그건 어떻게 하는것이게요?
실은 웹브라우저 켜서 어떤컴퓨터IP주소:포트번호 입력하면 그게 다른 컴퓨터에 접속하는 법이다.

내가 내 컴퓨터에 접속하는 방법도 있다.
내컴퓨터IP주소:포트번호 입력하면 되는데
번거롭게 IP주소 찾을 필요 없이 내 컴퓨터는 localhost라고 입력하면 된다.

그래서 남의 입장이 되어서 내 컴퓨터로 들어가는걸 시뮬레이션 해보려면
브라우저에 localhost:8080 이런거 입력해보는 것이다.

* 컨테이너 관련한 명령어들

이미지를 실행중인 컨테이너 관련한 명령어 몇개만 알아봅시다.

docker ps
현재 실행중인 컨테이너들을 살펴볼 수 있다.
(예) docker ps 터미널 실행 결과 
CONTAINER ID   IMAGE          COMMAND                   CREATED         STATUS         PORTS                    NAMES
3ab1acf87523   nodeserver:1   "docker-entrypoint.s…"   6 minutes ago   Up 6 minutes   0.0.0.0:8080->8080/tcp   keen_gauss

docker logs 컨테이너이름
컨테이너 컴퓨터 터미널의 로그 출력이 가능하다.
(예) docker logs keen_gauss 터미널 실행 결과 
서버 실행중 http://localhost:8080

docker exec -it 컨테이너이름 sh 
특정 컨테이너 터미널로 접속이 가능하다.
그럼 이제 명령어 입력할 때 마다 그 컨테이너 터미널 안에서 실행이 된다.
진짠지 궁금하면 들어가서 파일목록 보여주는 ls 명령어 입력해봅시다.
컨테이너를 탈출하려면 ctrl +p 후에 ctrl + q 입력한다.
(예) docker exec -it keen_gauss sh 터미널 실행 결과 
(터미널창에 # 출력되면 명령어 "ls" 추가 입력 및 엔터)
현재 폴더 파일 목록 보기 
# ls 
node_modules  package-lock.json  package.json  server.js  study.text
(터미널창에 # 출력되면 명령어 "cd .." 추가 입력 및 엔터)
파일 경로 이동 및 폴더 파일 목록 보기
# ls
app  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr                                                                                                    v
ar

docker stop 컨테이너이름
실행중인 컨테이너 정지해줌. 컨테이너 아이디 입력해도 된다.
(예) docker stop keen_gauss 터미널 실행 결과 
keen_gauss

docker rm 컨테이너이름
정지된 컨테이너를 삭제해줌. 정지안된 컨테이너 삭제하려면 -f 옵션을 붙여준다.
(예1) docker rm keen_gauss
(예2) docker rm keen_gauss -f

이런 식으로 쭉 나열해봤는데
뭔가 많이 배운거같은 느낌 주려고 한거고
어짜피 다음날 다 까먹기 때문에 그냥 이런게 있다고만 알고 지나가면 된다.

필요할 때 찾아서 쓰자.
위 명령어들은 docker desktop 안에서 container 메뉴 들어가면 전부 클릭질로 할 수 있게 되어있다.

* 컨테이너 구조
컨테이너의 실체같은게 궁금하면 별거 아니다.
리눅스 OS가 제공하는 이거저거 기능을 섞은 것이다.

리눅스의 namespace 기능을 사용하면
프로그램마다 서로 영향을 끼치지 않게 독립적으로 프로세스와 파일구조 같은걸 분리해줄 수 있다.

리눅스의 cgroup이라는 기능을 사용하면
프로그램마다 CPU나 램을 얼마나 점유할 건지도 정해둘 수 있다.

이런걸 이용하면 혼자 별도로 독립적으로 동작하는 가상 컴퓨터를 만들 수 있는데 그걸 "컨테이너"라고 멋있게 포장해서 부를 뿐이다.

컨테이너는 여러개 띄울 수 있어서 컴퓨터 한 대에서 여러 컴퓨터를 운영하는 것 처럼 마법을 부릴 수 있고
컨테이너에서 문제가 생겨도 내 컴퓨터로 전염되는 일이 거의 없고
그런 장점이 있다.

원래 runc같은 프로그램을 쓰면 컨테이너를 띄울 수 있다.
실은 containerd라는 프로그램으로 runc를 조작하면 편리해서 그런 경우들도 있다.
그럼 Docker는 뭐냐면 containerd, runc를 7살짜리도 쓸 수 있게 만든 프로그램일 뿐이다.
거기에 이미지 빌드기능, pull 기능, 관리기능 이런걸 더해서 개발자들 편하게 만들어준 것임

그래서 Docker대신 다른 프로그램 사용해도 된다.
Podman 이런 것도 유명하고 맥북의 경우 Orbstack 이런게 최근에 가볍다고 유행하던 것 같다.

6강 - 성능을 위한 Dockerfile 작성법

* 좋은 관습 1. 캐싱
프로젝트가 커지면 docker build 입력해서 기다리는 시간도 끔찍해지는 경우가 있다.
그러면 배포할 때마다 docker build 입력해야할텐데 그 때마다 속터져 죽는다.

죽기 싫으면 좋은 방법이 하나 있는데 그게 뭐냐면 
Dockerfile 작성시 "빌드할 때마다 변동사항이 많이 생기는 부분들을 최대한 아래 쪽에 적기"이다.
그럼 build 시간이 단축될 수 있다.


Q. 밑에 적는걸로 뭐가 빨라짐?

원래 빌드작업할 때 COPY, RUN 명령을 실행할 때 마다 도커가 몰래 캐싱을 해놓는다.
캐싱은 결과를 몰래 저장해놓고 나중에 필요해지면 재사용한다는 소리이다.

- 캐싱된 명령어들은 매우 빠르게 처리해줄 수 있다.
- 변동사항이 생긴 명령어부터는 캐싱된걸 사용하지 않는다.
- 그럼 변동사항이 많은건 좀 아래쪽으로 내리면 좋다.

 
예를 들면 Node.js로 웹서버 개발하는 경우는
package.json 내용이나 npm install로 라이브러리 설치하는건 날마다 변동사항이 거의 없다.
(라이브러리를 매일매일 설치하진 않지 않습니까)

그래서
1. OS와 Node.js 설치하고
2. package.json 먼저 옮겨서 라이브러리 설치부터 먼저 하고
3. 그 다음에 자주 변동되는 소스코드 옮기고
...

그런 식으로 Dockerfile을 작성하면 매번 docker build 할 때 약간이라도 더 빨라질 수 있는 것이다.

(예) Dockerfile 명령어 작성 예시
FROM node:20-slim
WORKDIR /app
COPY package*.json .
RUN ["npm", "install"]

COPY . .
EXPOSE 8080
CMD ["node", "server.js"]
그래서 이렇게 고쳐봤습니다.

이제 빌드할 때 마다 뭔가 빨라진 느낌이 들 수 있는데 지금은 별차이 없다.

* 좋은 관습 2. npm ci
(예) Dockerfile 명령어 npm ci 예시
RUN ["npm", "ci"]

Dockerfile 작성시 좋은 관습을 몇개 알아보자.
Node.js 개발할 때 라이브러리 정확한 버전 설치하려면 npm install 말고 npm ci 라는 커맨드를 쓰는 것도 좋다.
그냥 npm install하면 package.json에 기록된게 설치되긴 하는데

"express" : "^4.21" 가끔 이런 식으로 표기되어있으면 맨 앞자리가 4만 되면 된다는 뜻이라서
나중에 라이브러리가 업데이트되면 실수로 4.22 버전이 막 설치되고 그럴 수 있다.

그래서 이거 ^ 표시를 지우거나 아니면 package-lock.json에 내가 쓰는 라이브러리의 정확한 버전이 써있기 때문에
그걸 바탕으로 설치하라고 입력하는게 npm ci 이다. (package-lock.json 파일 바탕으로 설치하는 명령어가 RUN ["npm", "ci"] 이다.)

심심하면 Dockerfile을 그렇게 수정해보자.

* 좋은 관습 3. ENV

(예) Dockerfile 명령어 작성 예시
ENV NODE_ENV=production
CMD 어쩌구~

ENV 라는 명령어를 쓰면 환경변수를 집어넣어서 이미지를 빌드할 수 있다. 

ENV 환경변수이름=값 사용하면 된다.
이런걸 왜 쓰냐면 옛날부터 존재하던 express 같은 라이브러리들은

NODE_ENV=production을 집어넣어놔야 로그출력양을 좀 줄이고 그래서 성능이 향상되고 그런 케이스가 있다.
그래서 Node.js 개발시 설정해두면 나쁠건 없다.
참고로 docker run할 때도 -e 옵션으로 환경변수를 그때그때 집어넣어서 이미지를 실행할 수 있다.

* 좋은 관습 4. 권한 낮추기

보안적으로 더 나은 습관도 있는데
원래 Dockerfile에 적은 명령어들은 전부 root 권한으로 실행된다.

마지막에 서버 띄우는 명령어는 root 말고 권한을 좀 낮춰서 실행하는게 약간 더 안전하고 좋다.
그럴려면 유저를 하나 생성하고 그걸로 유저를 바꿔서 실행하라고 코드짜면 되는데
근데 node 공식 이미지의 경우엔 node라는 이름의 유저가 이미 만들어져있다. 

그래서 그거 써도 된다.

(Dockerfile)

USER node
CMD 어쩌구~
USER 유저이름 적으면 그 유저로 변경된다.

유저가 제공되지 않는 이미지는 직접 유저만드는 명령어 찾아서 쓰자.
참고로 실은 지금 하는 것들은 친절한 node 공식 이미지 설명서에 다 나와있는 것들이라
이런건 어디서 배워야 알 수 있는 건 아니고 찾아보면 나온다.
https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md

* Spring boot 프로젝트의 경우

Spring boot로 만든 웹서버가 있으면 그건 어떻게 이미지로 만드는지 알아보자.
Spring boot 모르면 그냥 취미로 들어보자.

Spring boot 서버를 실행하려면

1. 터미널에서 ./gradlew build 입력해서 .jar파일을 만들고
2. 터미널에서 java -jar .jar파일경로 입력해서 .jar 파일 실행하면 끝이다.

매우 간단한 편이라 Dockerfile도 저렇게 작성하면 이미지 생성 끝이다.

# 1. 터미널창에서 ./gradlew build를 입력해서 .jar파일 생성  

# 2. 새롭게 OS 다시 설치
FROM amazoncorretto:21.0.4
# 3. 거기에 .jar 파일만 옮김
WORKDIR /app
COPY . .
RUN ./gradlew build
# 4. java -jar .jar 파일 실행
CMD ["java", "-jar", ".jar파일경로"] 

프로젝트 폴더에 Dockerfile 만들고 이런거 작성하는게 끝이다.

- Java 21버전으로 설치했는데 여러분이 쓰던 버전으로 설치하면 된다.
- 아마 .jar 파일은 /build/libs 폴더에 생성되어있을 것이다.

근데 용량을 더 줄이고 싶으면 이런 편법을 써도 되는데
실은 생성된 .jar 파일만 있으면 서버를 돌릴 수 있기 때문에 다른 소스코드나 그런건 전혀 필요없다.

그래서 .jar 파일 하나만 담은 이미지를 생성해서 그것만 실행하라고 Dockerfile을 작성하면
이미지 용량을 훨씬 작게 만들 수 있다.

1. 터미널에 ./gradlew build를 입력해서 .jar파일을 만들기
2. 새로운 이미지를 만들어서 그 .jar 파일을 새로운 이미지로 옮기기
3. 명령어로 .jar 파일을 실행하기

이렇게 작성하면 되는 것임

* multi-stage build

# OS, Java 21 버전 설치한 이미지 불러오기
FROM amazoncorretto:21.0.4 AS build
# 폴더 app 이동
WORKDIR /app
# 소스코드 옮기기(복사)
COPY . .
# 명령어 ./gradlew build 실행 -> .jar 파일 생성 
RUN ./gradlew build

# Runtime stage
# OS 새로 설치 및 Java 21 버전 새로 설치한 이미지 불러오기 
FROM amazoncorretto:21.0.4 AS runtime
# 폴더 app 이동
WORKDIR /app
# 기존 이미지 .jar 파일(/app/build/libs/*.jar)을 현재 이미지 경로 이동(/app/server.jar)
# 명령어 COPY --from=build 실행(기존 이미지에서 생성된 파일을 현재 이미지로 COPY 가능)
COPY --from=build /app/build/libs/*.jar /app/server.jar
CMD ["java", "-jar", "/app/server.jar"] 

실은 Dockerfile에 FROM을 2번 이상 작성할 수 있는데
FROM을 만날 때 마다 위에 있는 작업내역들이 삭제되고 새로운 마음으로 깨끗하게 시작된다.

근데 깨끗하게 시작할 때 위의 작업내역에서 만든 파일들을 몰래 훔쳐올 수 있다.
이게 비결임

첫째 FROM에선 /app 폴더에서 .jar 파일만 만들어준다.
두번째 FROM에선 이전 FROM에서 나온 .jar 파일을 /app/server.jar 경로로 훔쳐오라고 했다.

--from=build 이러면 build라고 이름지은 곳에 있던 파일을 카피하라는 뜻이다.
(AS 명령어 쓰면 FROM마다 이름을 마음대로 붙일 수 있다.)

그 다음에 마지막에 .jar 파일을 실행하는것이다.
그럼 이제 최종 이미지에는 .jar 파일, 리눅스OS, 자바21 JDK 이 정도만 들어있어서 좀 가벼워졌겠군요.

FROM 여러번 쓰는 짓거리를 multi-stage build 라고 하는데
그래서 빌드과정이 필요한 프로젝트들은 이런 식으로 작성해서 용량을 줄이고 보안도 약간 챙길 수 있다.

* bootBuildImage 명령

실은 Spring boot에서 gradle을 쓰는 경우에는 이미지 만드는 명령어가 아마 내장되어있다.
터미널에 ./gradlew bootBuildImage 입력하면 이미지를 자동으로 만들어주기 때문에
Dockerfile 작성 귀찮으면 한 번 사용해보자.

* Next.js 프로젝트는

Next.js 프로젝트도 코드를 다 짰으면 npm run build 명령어 입력하고 npm start 이런 걸로 코드를 실행해야한다.

그래서 빌드 과정이 필요하기 때문에
이것도 Dockerfile 작성할 때 multi-stage build 잡기술을 이용하면 용량을 더 줄일 수 있다.

근데 그것보다 더 간편한게 있는데 nextjs output standalone 같은거 검색해보자.
그러면 배포할 때 꼭 필요한 파일만 알아서 남겨준다.

오늘의 결론은 
Dockerfile 작성할 때 잡기술 넣으면 여러 장점이 있다.

그리고 성능이나 최적화에 집착하면 고수처럼 보일 수 있다.

7강 - Docker hub, push, pull

* 리포지토리 만들기 
Docker hub 사이트에 방문해봅시다. (hub.docker.com)

▲ 가입하고 로그인해보면 리포지토리를 만드는 버튼이 어딘가에 있을텐데 눌러보자.
리포지토리는 "이미지 보관용 폴더"이다.

▲ 리포지토리 이름 작명하고 public이 무료라 그걸로 선택하면 된다.
(대신 public은 아무나 볼 수 있다)
그리고 오른쪽에 이미지 업로드하는 방법 그대로 따라하면 업로드 가능하다.

이미지 업로드하는 방법
Pushing images
You can push a new image to this repository using the CLI:

docker tag local-image:tagname new-repo:tagname
docker push new-repo:tagname

Make sure to replace tagname with your desired image repository tag.

* 이미지 업로드는 docker push

저번에 만든 이미지 하나를 저기 방금만든 리포지토리에 올려보자.
없으면 이미지 아무거나 도커허브에서 다운받아서 올려보자.

docker tag 이미지이름:태그명 리포지토리이름:태그명작명 (이미지 이름을 바꾸는 명령어)
docker push 리포지토리이름:태그명작명 (이미지를 도커허브 리포지토리에 올리는 명령어)

일단 이미지 올리려면 터미널 명령어가 2개 필요한데 
첫째는 일단 이미지 이름을 바꾸는 명령어고
두번째가 이미지를 도커허브 리포지토리에 올리는 명령어이다.

이미지 이름부터 바꿔야 하는 이유는
원래 이미지 이름에 정확히 그 리포지토리 이름이 들어가야 리포지토리에 올릴 수 있다.

▲ 저는 리포지토리 이름을 minjaejeon0827/myserver 이렇게 만들었기 때문에

docker tag nodeserver:1 minjaejeon0827/myserver:1
docker push minjaejeon0827/myserver:1
이런 식으로 이미지 이름을 바꾸고 올려봤다.

뭔가 안된다고 나오면 터미널에 docker login부터 입력해서 로그인 하라는거 해보시면 된다.

명령어 docker tag nodeserver:1 minjaejeon0827/myserver:1 실행시
Docker 응용 프로그램 -> 화면 좌측 버튼 "Images" 클릭 -> 화면 "Images" 이동 -> 해당 화면 중앙 이미지 목록에서 
▲ 참고로 docker tag 이용해서 이미지 이름을 바꾸면
이미지 목록에 이미지가 하나 더 추가된다. (이미지 minjaejeon0827/myserver 추가 )

그래서 뭔가 용량도 2배 차지하게 되고 그럴 것 같은데 ID가 동일(Image ID - a603f7baee64)하면 실은 같은 이미지이다.

원래 이미지는 여러개의 이름을 가질 수 있다.
해당 화면 중앙 이미지 목록은 그냥 모든 이미지 이름을 보여주는 곳이라고 보면 된다.

* pull하기

docker pull 이미지명:태그
이미지를 docker hub에서 내려받으려면 docker pull 명령어를 쓰면 된다.
(예)
docker pull minjaejeon0827/myserver:1
docker pull minjaejeon0827/myserver:2

실은 docker desktop 에서도 올리고 내려받을 수 있기 때문에 그런 식으로 써보셔도 된다.

Q. 이미지 업데이트된거 올리고싶으면?
- 태그명을 다르게 작성해서(minjaejeon0827/myserver:2) 이미지 새로 빌드하고(minjaejeon0827/myserver:2) 올리면 된다.
(예)
docker tag nodeserver:1 minjaejeon0827/myserver:2
docker push minjaejeon0827/myserver:2

Q. 다른 종류의 이미지도 업로드하고 싶으면?

예를 들어 서버 담은 이미지, 프론트엔드 담은 이미지, DB 담은 이미지 이런게 있으면
각각 어디에 업로드하는게 좋을까.

- 이런 경우엔 각각 별도의 리포지토리를 만들어서 거기에 업로드하는 경우들이 많다.
근데 귀찮아서 혹은 private 리포지토리 하나가지고 계속 쓰고 싶어서 하나의 리포지토리에 태그명만 다르게 해서 쑤셔넣는 경우도 있다.

하지만 이미지 종류마다 별도의 리포지토리를 만드는게 깔끔하다.

(참고) 리포지토리 만들 때 private 말고 public 으로 만들면 아무나 이걸 다운받을 수 있기 때문에
좀 민감한 내용이 들어있는 것들은 private 리포지토리에 올려두면 된다.

하지만 private 리포지토리는 계정마다 1개만 생성가능하다.

8강 - Network 1. nginx 만들기

* nginx
웹서버와 함께 돌리면 매우 좋은 프로그램이 하나 있다.
reverse proxy라고 하는데 서버로 들어오는 요청을 중간에 가로채주는 간단한 프로그램이다.

▲ 그걸 쓰면 유저들이 서버로 직접 들어오게 하는게 아니라
리버스 프록시 프로그램(nginx)으로 먼저 들어오게 하고
리버스 프록시가 유저를 다시 서버로 안내하는 식으로 만들어놓는다.

왜 그따구로 비효율적인 프로그램을 띄워놓냐면

- 서버의 정체를 안전하게 숨기기 가능
- HTTPS 인증서 설치 쉬움
- 서버가 여러개면 로드 밸런싱 가능
- 누가 접속했는지 로그도 남기기 쉬움
- IP 차단 쉽게가능

그래서 사용한다.
리버스 프록시 프로그램은 nginx 아니면 caddy 이런게 유명한데 우리는 nginx라는 리버스 프록시 프로그램을 써보도록 하자.

* nginx
이것도 이미지 만들어서 컨테이너로 실행해볼 것인데
그럴려면 nginx를 로컬컴퓨터에서 설치하고 셋팅하는 방법도 아는게 좋겟죠?
그래야 Dockerfile을 작성하든 할 것 아닙니까

여러분들 컴퓨터에서 nginx 설치하고 실행하려면

1. 컴퓨터에 nginx 설치 
참고 URL - https://nginx.org/
참고 2 URL - https://wikidocs.net/223824
참고 3 URL - https://bakingdevlog.tistory.com/13
참고 4 URL - https://jettstream.tistory.com/527

2. 동작방식을 .conf 파일에 맘대로 작성해서 설치폴더에 집어넣기
3. 터미널에 nginx -g daemon off; 입력해두면 nginx 실행

우선 .conf 파일은 어떻게 작성하는지 맛을 먼저 보도록 하자.

* .conf 파일 사용법
(myconfig1.conf)

server {
        listen 80;
        location / {
            proxy_pass http://localhost:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
}

아무 폴더 하나 만들어서 어쩌구.conf 파일을 안에 만들고 위에 있는 대충 기본적인 설정들을 복붙해보자.

- listen 80은 누가 80번 포트로 들어오면 밑에 있는 내용을 실행하라는 뜻이다.
- location / { } 부분은 누가 /로 시작하는 모든 경로로 들어오면 localhost:8080으로 보내라는 뜻이다.
- proxy_set_header 부분은 header라는 부분에 IP 주소 등 여러 정보를 채우라는 뜻인데 심심해서 넣어봤다.

그리고 이 설정파일을 특정 폴더에 넣어줘야한다.
리눅스에 nginx를 설치했으면 /etc/nginx/conf.d/ 폴더에 넣어주면
그러면 nginx가 알아서 .conf 파일을 가져가서 사용해준다.


정확히말하면 /etc/nginx/conf.d/어쩌구.conf 파일은

nginx.conf 라는 기본 설정파일의 http { } 안에 자동으로 넣어서 실행됩니다.

(예) nginx.conf
http {
    (여기 넣어줌)
}

근데 사소한 문제가 있는게
/etc/nginx/conf.d/default.conf 이라는 파일이 자동으로 생성되어있는데
그게 여러분들이 작성한 설정보다 먼저 적용될 수가 있다.

그래서 기본설정은 쓸데없으니까 그 파일은 삭제하면 된다. 
덮어써도 되고 삭제해도 된다.

* 이미지 빌드하기
그래서 dockerfile 이용해서 nginx 이미지를 한번 만들어보도록 하자.
nginx 설치하고 설정하고 실행하는거 그대로 Dockerfile에 써놓고 빌드하면 된다.

(예) (Dockerfile)

FROM nginx:latest

COPY ./myconfig1.conf /etc/nginx/conf.d/myconfig1.conf
RUN rm /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off"]

- nginx 설치하고
- Dockerfile 옆에 만들어둔 myconfig1.conf 설정파일을 리눅스의 /etc/nginx/conf.d/에 복붙하고 
- 기본설정파일은 삭제하고 
- nginx 실행하라고 했다.

docker build -t nginx:1 . 
터미널에서 nginx라는 이름으로 이미지를 빌드도 해봤다.

▲ 이미지 실행도 해보자.
누가 내 컴퓨터 80번 포트로 들어오면 이 컨테이너 80번 포트로 안내하라고 해봤다.
그럼 이제 localhost:80으로 접속해보면 뭔가 이상한게 나올텐데 그럼 성공이다.

nginx 설정에다가 누가 80번포트로 접속하면 localhost:8080으로 안내하라고 코드짜놨으니까
그럼 이제 localhost:8080에 웹서버를 띄워놓으면 의도대로 리버스 프록시처럼 잘 동작하지 않을까요?

▲ 그래서 전에 만든 웹서버도 8080포트에 컨테이너로 띄워봤다.
그럼 이론상 localhost:80 접속하면 localhost:8080에 있는 서버가 떠야하는데 아무것도 안뜨는데요?

▲ 그 이유는 그림으로 보시면 지금 가상컴퓨터 2대를 띄워놨고
내 컴퓨터의 포트도 거기에 각각 연결해뒀다.
왼쪽 nginx 가상컴퓨터에는 "누가 80번 포트로 들어오면 8080포트로 보내기" 라고 코드를 짜놨다.
하지만 왼쪽 nginx 가상컴퓨터에는 8080포트에서 동작중인 프로그램이 없는데요?
그래서 내 컴퓨터 80번 포트인 localhost:80으로 들어가도 아무것도 안나오고 에러가 나는 것일 뿐이다.

Q. 오른쪽 가상컴퓨터에 8080포트에 웹서버 돌아가고 있는데요?

- 그건 nginx와 상관없는 다른 별도의 컴퓨터일 뿐이다.
그래서 누가 "80번 포트로 들어오면 옆에 있는 가상 컴퓨터의 8080번 포트로 보내기" 이렇게 코드를 짜면 잘 동작합니다.
그럼 다른 가상컴퓨터로 접속하는 법을 알면 되겠네요.

* 다른 가상컴퓨터로 접속하려면
어떤 가상컴퓨터에서 다른 가상컴퓨터로 접속하려면 이런 방법도 있습니다.
내 컴퓨터랑 가상컴퓨터랑 포트를 연결해놨기 때문에

▲ "누가 80번 포트로 접속하면 다시 올라가서 내 컴퓨터의 8080번 포트로 들어가라"
이렇게 역류하는 식으로 짜도 되긴 한다.

▲ 근데 이것보다 더 안전하고 간단하게 하려면 network 라는걸 만들어서 그 안에 가상 컴퓨터를 담아놓아도 된다.
같은 network 안에 들어있는 가상 컴퓨터들은 서로 쉽게 통신이 가능해진다.

왜냐면 network 안에 집어넣으면 가상 IP주소를 부여해주기 때문에
가상IP주소:8080 이런 식으로 사용하면 다른 가상컴퓨터에 접속가능하다.

다음 시간에 해보자.